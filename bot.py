import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
from sqlalchemy.orm import Session
from database import SessionLocal, Task

# üîπ –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not TELEGRAM_BOT_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env")
    exit(1)

# üéõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = ReplyKeyboardMarkup(
    [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"],
        ["‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ"]
    ],
    resize_keyboard=True
)

# üéõ –ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
CONFIRM_DELETE_MENU = ReplyKeyboardMarkup(
    [
        ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]
    ],
    resize_keyboard=True
)

# üéõ –ú–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
SKIP_DESCRIPTION_MENU = ReplyKeyboardMarkup(
    [
        ["‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
    ],
    resize_keyboard=True
)

# üîπ –•—Ä–∞–Ω–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ update_id
processed_updates = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ | update_id: {update.update_id}")
    context.user_data.clear()
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU)

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."""
    with SessionLocal() as db:
        tasks = db.query(Task).all()

    if not tasks:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.", reply_markup=MAIN_MENU)
        return

    task_list = "\n".join([f"üìå {t.id}: {t.title}" + (f" - {t.description}" if t.description else "") for t in tasks])
    await update.message.reply_text(f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{task_list}", reply_markup=MAIN_MENU)

async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    with SessionLocal() as db:
        tasks = db.query(Task).all()

    if not tasks:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=MAIN_MENU)
        return

    task_list = "\n".join([f"{t.id}: {t.title}" for t in tasks])
    await update.message.reply_text(f"üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n{task_list}")
    context.user_data["action"] = "confirm_delete_task"

async def confirm_delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è."""
    user_text = update.message.text.strip()
    if not user_text.replace(",", "").isdigit():
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: `1,2,3`", reply_markup=MAIN_MENU)
        return

    context.user_data["tasks_to_delete"] = [int(i) for i in user_text.split(",") if i.isdigit()]
    await update.message.reply_text(f"üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á: {user_text}", reply_markup=CONFIRM_DELETE_MENU)
    context.user_data["action"] = "process_delete_task"

async def process_delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    user_text = update.message.text.strip()
    if user_text == "‚úÖ –î–∞":
        tasks_to_delete = context.user_data.get("tasks_to_delete", [])

        with SessionLocal() as db:
            for task_id in tasks_to_delete:
                task = db.query(Task).filter(Task.id == task_id).first()
                if task:
                    db.delete(task)
            db.commit()

        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏: {', '.join(map(str, tasks_to_delete))}", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU)

    context.user_data.clear()

async def clear_all_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏."""
    with SessionLocal() as db:
        db.query(Task).delete()
        db.commit()

    await update.message.reply_text("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã!", reply_markup=MAIN_MENU)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é."""
    user_text = update.message.text.strip()

    if is_duplicate(update, allow_menu=True):
        return

    logger.info(f"üì© –ú–µ–Ω—é –≤—ã–±—Ä–∞–Ω–æ: {user_text} | update_id: {update.update_id}")

    if user_text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data["action"] = "adding_task_title"
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

    elif user_text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
        await list_tasks(update, context)

    elif user_text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        await delete_task(update, context)

    elif user_text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ":
        await clear_all_tasks(update, context)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞."""
    if is_duplicate(update):
        return

    user_text = update.message.text.strip()
    action = context.user_data.get("action", None)

    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text} | –î–µ–π—Å—Ç–≤–∏–µ: {action}")

    if user_text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ"]:
        await handle_menu(update, context)
        return

    if action == "confirm_delete_task":
        await confirm_delete_task(update, context)
    elif action == "process_delete_task":
        await process_delete_task(update, context)
    elif action == "adding_task_title":
        context.user_data["new_task_title"] = user_text
        context.user_data["action"] = "adding_task_description"
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):", reply_markup=SKIP_DESCRIPTION_MENU)
    elif action == "adding_task_description":
        if user_text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await save_task(update, context, None)
        else:
            await save_task(update, context, user_text)

async def save_task(update: Update, context: ContextTypes.DEFAULT_TYPE, description: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    title = context.user_data.get("new_task_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    with SessionLocal() as db:
        new_task = Task(title=title, description=description if description else None)
        db.add(new_task)
        db.commit()

    await update.message.reply_text(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\nüìå *{title}*" + (f"\nüìù {description}" if description else ""),
        reply_markup=MAIN_MENU,
        parse_mode="Markdown"
    )

    context.user_data.clear()

def is_duplicate(update: Update, allow_menu=False) -> bool:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π."""
    chat_id = update.effective_chat.id
    update_id = update.update_id

    if chat_id not in processed_updates:
        processed_updates[chat_id] = set()

    if update_id in processed_updates[chat_id]:
        return not allow_menu

    processed_updates[chat_id].add(update_id)
    return False

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CommandHandler("start", start))
    application.run_polling()

if __name__ == "__main__":
    main()
