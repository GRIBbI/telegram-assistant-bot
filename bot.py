import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram_bot_calendar import DetailedTelegramCalendar
from sqlalchemy.orm import Session
from apscheduler.schedulers.background import BackgroundScheduler
from database import SessionLocal, Task

# üîπ –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not TELEGRAM_BOT_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env")
    exit(1)

# üéõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = ReplyKeyboardMarkup(
    [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"],
        ["‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]
    ],
    resize_keyboard=True
)

# üéõ –ú–µ–Ω—é –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–¥–∞—á
TASKS_MENU = ReplyKeyboardMarkup(
    [
        ["‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ"],
        ["üîô –ù–∞–∑–∞–¥"]
    ],
    resize_keyboard=True
)

# üéõ –ú–µ–Ω—é –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
ADD_TASK_MENU = ReplyKeyboardMarkup(
    [
        ["‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"]
    ],
    resize_keyboard=True
)

# üîπ –ó–∞–ø—É—Å–∫–∞–µ–º `apscheduler`
scheduler = BackgroundScheduler()
scheduler.start()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ | update_id: {update.update_id}")
    context.user_data.clear()
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_text = update.message.text.strip()
    action = context.user_data.get("action")

    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text} | –î–µ–π—Å—Ç–≤–∏–µ: {action}")

    # üü¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ `handle_menu`
    if not action:
        await handle_menu(update, context)
        return

    # üö® –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    if user_text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", "üîô –ù–∞–∑–∞–¥"]:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    # üü¢ –û–∂–∏–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
    if action == "adding_task_title":
        context.user_data["new_task_title"] = user_text
        context.user_data["action"] = "adding_task_description"
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')", reply_markup=ADD_TASK_MENU)

    # üü¢ –û–∂–∏–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    elif action == "adding_task_description":
        if user_text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            context.user_data["new_task_description"] = None
        else:
            context.user_data["new_task_description"] = user_text

        context.user_data["action"] = "adding_task_deadline"
        await send_calendar(update, context)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é"""
    user_text = update.message.text.strip()

    logger.info(f"üì© –ú–µ–Ω—é –≤—ã–±—Ä–∞–Ω–æ: {user_text}")

    if user_text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data["action"] = "adding_task_title"
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

    elif user_text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
        await list_tasks(update, context)

    elif user_text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        await delete_task(update, context)

    elif user_text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ":
        await clear_all_tasks(update, context)

    elif user_text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MAIN_MENU)

async def send_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å Telegram –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    calendar, step = DetailedTelegramCalendar().build()
    await update.message.reply_text(f"üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞:", reply_markup=calendar)

async def calendar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    query = update.callback_query
    result, key, step = DetailedTelegramCalendar().process(query.data)

    if not result and key:
        await query.message.edit_text(f"üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞:", reply_markup=key)
    elif result:
        deadline = datetime.strptime(str(result), "%Y-%m-%d")
        await save_task(update, context, deadline)

async def save_task(update: Update, context: ContextTypes.DEFAULT_TYPE, deadline):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    title = context.user_data.get("new_task_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    details = context.user_data.get("new_task_description", None)

    with SessionLocal() as db:
        new_task = Task(title=title, details=details, deadline=deadline)
        db.add(new_task)
        db.commit()

    task_info = f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\nüìå *{title}*" + (f"\nüìù {details}" if details else "") + (f"\n‚è≥ {deadline.strftime('%d.%m.%Y')}" if deadline else "")

    await update.message.reply_text(task_info, reply_markup=MAIN_MENU, parse_mode="Markdown")

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if deadline:
        scheduler.add_job(send_reminder, "date", run_date=deadline, args=[update, context, title])

    context.user_data.clear()

async def send_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE, task_title):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ"""
    await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É: *{task_title}*", parse_mode="Markdown")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(calendar_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == "__main__":
    main()
