import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ForceReply
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from sqlalchemy.orm import Session
from apscheduler.schedulers.background import BackgroundScheduler
from database import SessionLocal, Task, init_db

# üîπ –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not TELEGRAM_BOT_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env")
    exit(1)

# üéõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = ReplyKeyboardMarkup(
    [
        ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"],
        ["‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]
    ],
    resize_keyboard=True
)

# üîπ –ó–∞–ø—É—Å–∫–∞–µ–º `apscheduler`
scheduler = BackgroundScheduler()
scheduler.start()

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ | update_id: {update.update_id}")
    context.user_data.clear()
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_text = update.message.text.strip().lower()
    logger.info(f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {user_text}")

    if user_text == "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data["action"] = "adding_task_title"
        logger.info(f"üìå –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {context.user_data['action']}")
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

    elif user_text == "—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
        await update.message.reply_text("üìú –í–∞—à–∏ –∑–∞–¥–∞—á–∏: (–ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ)")

    elif user_text == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        await update.message.reply_text("üîî –ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")

    else:
        await update.message.reply_text("‚ö†Ô∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=MAIN_MENU)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞—Å—Ç–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Ç.–¥.)"""
    user_text = update.message.text.strip()
    action = context.user_data.get("action")

    logger.info(f"üìù –í–≤–µ–¥—ë–Ω —Ç–µ–∫—Å—Ç: {user_text} | –¢–µ–∫—É—â–∏–π action: {action}")

    if action == "adding_task_title":
        context.user_data["new_task_title"] = user_text
        context.user_data["action"] = "adding_task_description"
        logger.info(f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {user_text}")
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')", 
                                        reply_markup=ReplyKeyboardMarkup([["‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]], resize_keyboard=True))

    elif action == "adding_task_description":
        context.user_data["new_task_description"] = None if user_text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else user_text
        context.user_data["action"] = "adding_task_deadline"
        await send_calendar(update, context)

    elif action == "adding_custom_time":
        try:
            deadline_date = context.user_data.get("deadline_date")
            if not deadline_date:
                logger.error("‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞! –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return

            deadline = datetime.combine(deadline_date, datetime.strptime(user_text, "%H:%M").time())
            await save_task(update, context, deadline)
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")

async def send_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å Telegram –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    calendar, step = DetailedTelegramCalendar().build()
    await update.message.reply_text(f"üìÜ –í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}:", reply_markup=calendar)

async def time_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()

    logger.info(f"‚è∞ Callback –ø–æ–ª—É—á–µ–Ω: {query.data}")

    if query.data == "custom_time":
        context.user_data["action"] = "adding_custom_time"
        await query.message.reply_text("‚åõ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)", reply_markup=ForceReply())
    else:
        selected_time = query.data.split("_")[1]
        deadline_date = context.user_data.get("deadline_date")

        if not deadline_date:
            logger.error("‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞! –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        deadline = datetime.combine(deadline_date, datetime.strptime(selected_time, "%H:%M").time())

        await query.message.edit_text(f"‚è≥ –í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ: {selected_time} ‚úÖ")
        await save_task(update, context, deadline)

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^(–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É|–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á|‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)$"), handle_menu))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(time_callback, pattern="^time_[0-9]{2}:[0-9]{2}|custom_time"))

    application.run_polling()

if __name__ == "__main__":
    main()
