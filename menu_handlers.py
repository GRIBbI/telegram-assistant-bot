import logging
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError

from database import SessionLocal, Task
from openai_integration import get_gpt_response

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏)
MAIN_MENU = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")],
        [KeyboardButton("GPT-—á–∞—Ç")]
    ],
    resize_keyboard=True
)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MENU
    )

async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    user_text = update.message.text.strip()

    if user_text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        context.user_data["action"] = "adding_task_title"

    elif user_text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
        await list_tasks(update, context)

    elif user_text == "GPT-—á–∞—Ç":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
        context.user_data["action"] = "gpt_chat"

    else:
        await process_user_action(update, context, user_text)

async def process_user_action(update: Update, context: ContextTypes.DEFAULT_TYPE, user_text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    action = context.user_data.get("action")

    if action == "adding_task_title":
        context.user_data["new_task_title"] = user_text
        context.user_data["action"] = "adding_task_description"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).")

    elif action == "adding_task_description":
        title = context.user_data.get("new_task_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        description = user_text if user_text.strip() else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

        try:
            with SessionLocal() as db:
                new_task = Task(title=title, description=description)
                db.add(new_task)
                db.commit()

            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        context.user_data.clear()
        await show_main_menu(update, context)

    elif action == "gpt_chat":
        try:
            gpt_reply = get_gpt_response(user_text)
            await update.message.reply_text(gpt_reply)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    else:
        await show_main_menu(update, context)

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        with SessionLocal() as db:
            tasks = db.query(Task).all()

        if not tasks:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        else:
            task_list = "\n".join([f" - {t.id}: {t.title} ({t.description})" for t in tasks])
            await update.message.reply_text(f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{task_list}")

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.")

    await show_main_menu(update, context)
